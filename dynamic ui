import { getAttachmentType } from './path-to-your-file';
import { AttachmentType } from 'types/spark-driver/incident-attachments.types';

describe('getAttachmentType', () => {
  it('should return AttachmentType.PDF for PDF files', () => {
    expect(getAttachmentType('file.pdf')).toBe(AttachmentType.PDF);
  });

  it('should return AttachmentType.IMAGE for PNG files', () => {
    expect(getAttachmentType('file.png')).toBe(AttachmentType.IMAGE);
  });

  it('should return AttachmentType.IMAGE for JPEG files', () => {
    expect(getAttachmentType('file.jpeg')).toBe(AttachmentType.IMAGE);
  });

  it('should return AttachmentType.IMAGE for JPG files', () => {
    expect(getAttachmentType('file.jpg')).toBe(AttachmentType.IMAGE);
  });

  it('should return AttachmentType.IMAGE for TIF files', () => {
    expect(getAttachmentType('file.tif')).toBe(AttachmentType.IMAGE);
  });

  it('should return AttachmentType.OTHER for unsupported file types', () => {
    expect(getAttachmentType('file.unsupported')).toBe(AttachmentType.OTHER);
  });

  it('should return AttachmentType.OTHER for URLs without file extensions', () => {
    expect(getAttachmentType('file')).toBe(AttachmentType.OTHER);
  });
});


import { fetchAndDownloadFile } from './path-to-your-file';

// Mocking fetch and URL.createObjectURL
global.fetch = jest.fn(() =>
  Promise.resolve({
    ok: true,
    blob: () => Promise.resolve(new Blob(['test'], { type: 'application/pdf' })),
  })
);

global.URL.createObjectURL = jest.fn(() => 'mock-url');
global.URL.revokeObjectURL = jest.fn();

// Mocking document.createElement and related methods
document.createElement = jest.fn(() => ({
  href: '',
  download: '',
  click: jest.fn(),
}));

document.body.appendChild = jest.fn();
document.body.removeChild = jest.fn();

describe('fetchAndDownloadFile', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should download the file successfully', async () => {
    await fetchAndDownloadFile('http://example.com/file.pdf', 'file.pdf');

    expect(fetch).toHaveBeenCalledWith('http://example.com/file.pdf');
    expect(document.createElement).toHaveBeenCalledWith('a');
    expect(document.body.appendChild).toHaveBeenCalled();
    expect(document.body.removeChild).toHaveBeenCalled();
    expect(URL.revokeObjectURL).toHaveBeenCalledWith('mock-url');
  });

  it('should handle fetch errors', async () => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: false,
        statusText: 'Not Found',
      })
    );

    console.error = jest.fn();

    await fetchAndDownloadFile('http://example.com/file.pdf', 'file.pdf');

    expect(fetch).toHaveBeenCalledWith('http://example.com/file.pdf');
    expect(console.error).toHaveBeenCalledWith(new Error('Failed to fetch file.pdf: Not Found'));
  });
});
