import React from 'react';
import { render, screen } from '@testing-library/react';
import DeliveryMapWidget from './DeliveryMapWidget';
import { Context } from 'context';

// Mock the Google Maps API
global.google = {
  maps: {
    Map: jest.fn(),
    LatLng: jest.fn((lat, lng) => ({ lat, lng })),
    LatLngBounds: jest.fn(() => ({
      extend: jest.fn(),
      contains: jest.fn(),
    })),
    Size: jest.fn((width, height) => ({ width, height })), // Mocking google.maps.Size
    Point: jest.fn((x, y) => ({ x, y })), // Mocking google.maps.Point
    Marker: jest.fn(),
    Circle: jest.fn(),
    Polyline: jest.fn(),
    geometry: {
      spherical: {
        computeDistanceBetween: jest.fn(() => 1000), // Mock distance calculation
      },
      encoding: {
        decodePath: jest.fn(() => [
          { lat: 37.7749, lng: -122.4194 },
          { lat: 37.8044, lng: -122.2711 },
        ]),
      },
    },
  },
};

// Mock React Google Maps Library
jest.mock('@react-google-maps/api', () => ({
  useJsApiLoader: () => ({ isLoaded: true }),
  GoogleMap: ({ children }) => <div data-testid="google-map">{children}</div>,
  MarkerF: () => <div data-testid="marker"></div>,
  Circle: () => <div data-testid="circle"></div>,
  Polyline: () => <div data-testid="polyline"></div>,
}));

// Mock utility functions
jest.mock('utils/spark-driver/delivery-map.utils', () => ({
  getStoreCustomerAndCurrentStopLocation: jest.fn(() => ({
    storeLocation: { location: { latLong: { lat: 37.7749, lng: -122.4194 } } },
    customerLocation: { location: { latLong: { lat: 37.8044, lng: -122.2711 } } },
    currentStop: { location: { latLong: { lat: 37.7888, lng: -122.4 } }, id: 'stop1' },
  })),
}));

describe('DeliveryMapWidget', () => {
  const mockDispatch = jest.fn();

  const mockContextValue = {
    state: {
      sparkDriver: {
        selectedTask: { id: 'task1', orderId: 'order1' },
        selectedTrip: { tripId: 'trip1' },
      },
    },
    dispatch: mockDispatch,
  };

  beforeEach(() => {
    jest.clearAllMocks(); // Clear mocks before each test
  });

  it('renders the DeliveryMapWidget component', () => {
    render(
      <Context.Provider value={mockContextValue}>
        <DeliveryMapWidget />
      </Context.Provider>
    );

    expect(screen.getByText("Driver's Location")).toBeInTheDocument();
    expect(screen.getByTestId('google-map')).toBeInTheDocument();
  });
});
