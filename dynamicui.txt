import { validateSafetyIssue } from "./path-to-your-code";
import { SafetyIssue } from "types/spark-driver/safety-issue.types";

describe("validateSafetyIssue", () => {
  it("should return invalid selection and valid comments when selection is null", () => {
    const issue: SafetyIssue = {
      selection: null,
      comments: "Some comments",
    };

    const result = validateSafetyIssue(issue);

    expect(result.selection.valid).toBe(false);
    expect(result.comments.valid).toBe(true);
  });

  it("should return valid selection and valid comments when selection is present and criticality is not nonCritical", () => {
    const issue: SafetyIssue = {
      selection: {
        criticality: "critical",
      },
      comments: "",
    };

    const result = validateSafetyIssue(issue);

    expect(result.selection.valid).toBe(true);
    expect(result.comments.valid).toBe(true);
  });

  it("should return valid selection and invalid comments when selection is present, criticality is nonCritical, and comments are empty", () => {
    const issue: SafetyIssue = {
      selection: {
        criticality: "nonCritical",
      },
      comments: "",
    };

    const result = validateSafetyIssue(issue);

    expect(result.selection.valid).toBe(true);
    expect(result.comments.valid).toBe(false);
  });

  it("should return valid selection and valid comments when selection is present, criticality is nonCritical, and comments are non-empty", () => {
    const issue: SafetyIssue = {
      selection: {
        criticality: "nonCritical",
      },
      comments: "Some comments",
    };

    const result = validateSafetyIssue(issue);

    expect(result.selection.valid).toBe(true);
    expect(result.comments.valid).toBe(true);
  });

  it("should return valid selection and invalid comments when selection is present, criticality is nonCritical, and comments are only whitespace", () => {
    const issue: SafetyIssue = {
      selection: {
        criticality: "nonCritical",
      },
      comments: "   ",
    };

    const result = validateSafetyIssue(issue);

    expect(result.selection.valid).toBe(true);
    expect(result.comments.valid).toBe(false);
  });
});
