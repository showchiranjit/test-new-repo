import { formatSelectedDriver } from './path-to-your-file';

describe('formatSelectedDriver', () => {
  it('should format a driver object with all fields', () => {
    const driver = {
      driverUUID: '123',
      firstName: 'John',
      lastName: 'Doe',
      mobile: '1234567890',
      email: 'john.doe@example.com',
    };

    const result = formatSelectedDriver(driver);

    expect(result).toEqual({
      driverUUID: '123',
      firstName: 'John',
      lastName: 'Doe',
      mobile: '1234567890',
      email: 'john.doe@example.com',
    });
  });

  it('should format a driver object with missing fields', () => {
    const driver = {
      driverUUID: '123',
      firstName: 'John',
    };

    const result = formatSelectedDriver(driver);

    expect(result).toEqual({
      driverUUID: '123',
      firstName: 'John',
      lastName: '',
      mobile: undefined,
      email: undefined,
    });
  });

  it('should handle undefined driver', () => {
    const result = formatSelectedDriver(undefined);

    expect(result).toEqual({
      driverUUID: '',
      firstName: '',
      lastName: '',
      mobile: undefined,
      email: undefined,
    });
  });

  it('should handle null driver', () => {
    const result = formatSelectedDriver(null);

    expect(result).toEqual({
      driverUUID: '',
      firstName: '',
      lastName: '',
      mobile: undefined,
      email: undefined,
    });
  });
});




import { formatDriverDataToCustomer } from './path-to-your-file';
import { CustomerContext } from 'types/customer.types';

describe('formatDriverDataToCustomer', () => {
  it('should format a driver object to customer context with all fields', () => {
    const driver = {
      driverUUID: '123',
      firstName: 'John',
      lastName: 'Doe',
      mobile: '1234567890',
      email: 'john.doe@example.com',
      searchInput: 'John Doe',
      isVerified: true,
    };

    const result = formatDriverDataToCustomer(driver);

    expect(result).toEqual({
      id: '123',
      firstName: 'John',
      lastName: 'Doe',
      phone: '1234567890',
      phonePrefix: '',
      email: 'john.doe@example.com',
      searchInput: 'John Doe',
      postalCode: '',
      member: false,
      memberSince: 0,
      customerSince: 0,
      isVerified: true,
      customerType: '',
      accountType: '',
      updateState: false,
      accountReason: '',
    });
  });

  it('should format a driver object to customer context with missing fields', () => {
    const driver = {
      driverUUID: '123',
      firstName: 'John',
    };

    const result = formatDriverDataToCustomer(driver);

    expect(result).toEqual({
      id: '123',
      firstName: 'John',
      lastName: '',
      phone: undefined,
      phonePrefix: '',
      email: undefined,
      searchInput: undefined,
      postalCode: '',
      member: false,
      memberSince: 0,
      customerSince: 0,
      isVerified: undefined,
      customerType: '',
      accountType: '',
      updateState: false,
      accountReason: '',
    });
  });

  it('should handle undefined driver', () => {
    const result = formatDriverDataToCustomer(undefined);

    expect(result).toEqual({
      id: '',
      firstName: '',
      lastName: '',
      phone: undefined,
      phonePrefix: '',
      email: undefined,
      searchInput: undefined,
      postalCode: '',
      member: false,
      memberSince: 0,
      customerSince: 0,
      isVerified: undefined,
      customerType: '',
      accountType: '',
      updateState: false,
      accountReason: '',
    });
  });

  it('should handle null driver', () => {
    const result = formatDriverDataToCustomer(null);

    expect(result).toEqual({
      id: '',
      firstName: '',
      lastName: '',
      phone: undefined,
      phonePrefix: '',
      email: undefined,
      searchInput: undefined,
      postalCode: '',
      member: false,
      memberSince: 0,
      customerSince: 0,
      isVerified: undefined,
      customerType: '',
      accountType: '',
      updateState: false,
      accountReason: '',
    });
  });
});
