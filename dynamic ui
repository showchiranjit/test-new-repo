import { getAttachmentType, fetchAndDownloadFile } from './fileUtils';
import { AttachmentType } from 'types/spark-driver/incident-attachments.types';

// Mock for fetch and URL.createObjectURL
global.fetch = jest.fn();
global.URL.createObjectURL = jest.fn();
global.document.createElement = jest.fn().mockReturnValue({ click: jest.fn() });

describe('getAttachmentType', () => {
  it('should return PDF for .pdf extension', () => {
    const result = getAttachmentType('file.pdf');
    expect(result).toBe(AttachmentType.PDF);
  });

  it('should return IMAGE for .png extension', () => {
    const result = getAttachmentType('file.png');
    expect(result).toBe(AttachmentType.IMAGE);
  });

  it('should return IMAGE for .jpeg extension', () => {
    const result = getAttachmentType('file.jpeg');
    expect(result).toBe(AttachmentType.IMAGE);
  });

  it('should return IMAGE for .jpg extension', () => {
    const result = getAttachmentType('file.jpg');
    expect(result).toBe(AttachmentType.IMAGE);
  });

  it('should return IMAGE for .tif extension', () => {
    const result = getAttachmentType('file.tif');
    expect(result).toBe(AttachmentType.IMAGE);
  });

  it('should return OTHER for unknown extension', () => {
    const result = getAttachmentType('file.xyz');
    expect(result).toBe(AttachmentType.OTHER);
  });

  it('should return OTHER for no extension', () => {
    const result = getAttachmentType('file');
    expect(result).toBe(AttachmentType.OTHER);
  });
});

describe('fetchAndDownloadFile', () => {
  it('should handle successful fetch and download', async () => {
    const mockBlob = new Blob();
    const mockResponse = { ok: true, blob: jest.fn().mockResolvedValue(mockBlob) };
    global.fetch.mockResolvedValue(mockResponse);

    await fetchAndDownloadFile('http://example.com/file', 'file.pdf');

    expect(fetch).toHaveBeenCalledWith('http://example.com/file');
    expect(mockResponse.blob).toHaveBeenCalled();
    expect(document.createElement).toHaveBeenCalledWith('a');
    expect(document.body.appendChild).toHaveBeenCalled();
    expect(document.body.removeChild).toHaveBeenCalled();
    expect(URL.revokeObjectURL).toHaveBeenCalled();
  });

  it('should handle fetch error', async () => {
    const mockError = new Error('Network Error');
    global.fetch.mockRejectedValue(mockError);

    await fetchAndDownloadFile('http://example.com/file', 'file.pdf');

    expect(fetch).toHaveBeenCalledWith('http://example.com/file');
    expect(console.error).toHaveBeenCalledWith(mockError);
  });

  it('should handle response not OK', async () => {
    const mockResponse = { ok: false, statusText: 'Not Found' };
    global.fetch.mockResolvedValue(mockResponse);

    await fetchAndDownloadFile('http://example.com/file', 'file.pdf');

    expect(fetch).toHaveBeenCalledWith('http://example.com/file');
    expect(console.error).toHaveBeenCalledWith(
      new Error('Failed to fetch file.pdf: Not Found')
    );
  });
});
