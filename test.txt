import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import TaskList from './TaskList';
import {
  DeliveryTask,
  SelectionType,
  Trip,
  SortedTrip,
  ServiceType,
} from 'types/spark-driver/trip.types';
import { formatDeliveryTimeRange } from 'utils/spark-driver/trip-utils';
import lodash from 'lodash';

jest.mock('utils/spark-driver/trip-utils', () => ({
  formatDeliveryTimeRange: jest.fn(() => '10:00 AM - 12:00 PM'),
}));

jest.mock('lodash', () => ({
  capitalize: jest.fn((text) => text),
}));

describe('TaskList Component', () => {
  const mockTrip = {
    id: 'trip-1',
  } as SortedTrip;

  const mockTasks: DeliveryTask[] = [
    {
      orderId: 'order-1',
      serviceType: ServiceType.DELIVERY,
      storeInfo: { storeName: 'Store A' },
      customerInfo: {
        customerFirstName: 'John',
        customerLastName: 'Doe',
        addressLine1: '123 Main St',
        city: 'Sample City',
        state: 'CA',
        postalCode: '12345',
      },
      customerStartTime: '2025-01-10T10:00:00Z',
      customerEndTime: '2025-01-10T12:00:00Z',
      statusDisplayTextLine1: 'In Progress',
      externalStatus: 'delivered',
    },
  ];

  const mockOnSelectTask = jest.fn();
  const mockOnSelectTrip = jest.fn();

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render tasks correctly', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    expect(screen.getByText('John Doe')).toBeInTheDocument();
    expect(screen.getByText('Order #order-1')).toBeInTheDocument();
    expect(screen.getByText('10:00 AM - 12:00 PM')).toBeInTheDocument();
    expect(screen.getByText('In Progress')).toBeInTheDocument();
  });

  it('should call onSelectTask and onSelectTrip when a task is selected', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    const radioButton = screen.getByRole('radio');
    fireEvent.click(radioButton);

    expect(mockOnSelectTrip).toHaveBeenCalledWith(mockTrip);
    expect(mockOnSelectTask).toHaveBeenCalledWith(mockTasks[0], mockTrip);
  });

  it('should render AddressDetails for non-delivery tasks', () => {
    const returnTask = {
      ...mockTasks[0],
      serviceType: ServiceType.RETURN,
    };

    render(
      <TaskList
        trip={mockTrip}
        tasks={[returnTask]}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    expect(screen.getByText('123 Main St')).toBeInTheDocument();
    expect(screen.getByText('Sample City')).toBeInTheDocument();
    expect(screen.getByText('CA')).toBeInTheDocument();
    expect(screen.getByText('12345')).toBeInTheDocument();
  });

  it('should not render AddressDetails for delivery tasks', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    expect(screen.queryByText('123 Main St')).not.toBeInTheDocument();
  });

  it('should render StorePickupDropoff for delivery tasks', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    expect(screen.getByText('Store A')).toBeInTheDocument();
  });

  it('should render vertical line element', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    const verticalLine = screen.getByRole('separator');
    expect(verticalLine).toBeInTheDocument();
  });

  it('should handle empty tasks array gracefully', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={[]}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
        onSelectTask={mockOnSelectTask}
        onSelectTrip={mockOnSelectTrip}
      />
    );

    expect(screen.queryByText('John Doe')).not.toBeInTheDocument();
    expect(screen.queryByText('Order #order-1')).not.toBeInTheDocument();
  });

  it('should handle missing callbacks gracefully', () => {
    render(
      <TaskList
        trip={mockTrip}
        tasks={mockTasks}
        selectionMode={SelectionType.ORDER}
        selectedTask={null}
      />
    );

    const radioButton = screen.getByRole('radio');
    fireEvent.click(radioButton);

    expect(mockOnSelectTrip).not.toHaveBeenCalled();
    expect(mockOnSelectTask).not.toHaveBeenCalled();
  });
});
