import { getCriteriaType } from './path-to-your-file'; // Adjust the import path
import { CriteriaType } from 'types/spark-driver/lookup-verify.types';
import { validateEmail } from 'utils/validator-utils';

// Mock the validateEmail function
jest.mock('utils/validator-utils', () => ({
  validateEmail: jest.fn(),
}));

describe('getCriteriaType', () => {
  beforeEach(() => {
    // Reset the mock implementation before each test
    jest.clearAllMocks();
  });

  it('should return CriteriaType.PHONE for valid phone numbers', () => {
    const phoneNumbers = [
      '2025550123',       // Valid 10-digit phone number
      '(202)555-0123',   // Valid with parentheses and hyphen
      '202.555.0123',     // Valid with dots
      '202-555-0123',     // Valid with hyphens
    ];

    phoneNumbers.forEach((phone) => {
      expect(getCriteriaType(phone)).toBe(CriteriaType.PHONE);
    });
  });

  it('should return CriteriaType.EMAIL for valid email addresses', () => {
    // Mock validateEmail to return true for valid emails
    (validateEmail as jest.Mock).mockReturnValue(true);

    const emails = [
      'test@example.com',
      'user.name+tag+sorting@example.com',
      'user@sub.example.com',
    ];

    emails.forEach((email) => {
      expect(getCriteriaType(email)).toBe(CriteriaType.EMAIL);
      expect(validateEmail).toHaveBeenCalledWith(email); // Ensure validateEmail is called
    });
  });

  it('should return CriteriaType.NAME for invalid phone numbers and emails', () => {
    // Mock validateEmail to return false for invalid emails
    (validateEmail as jest.Mock).mockReturnValue(false);

    const invalidInputs = [
      '12345',            // Invalid phone number
      'invalid-email',    // Invalid email
      'John Doe',         // Name
      '123-45-6789',     // Invalid phone number format
    ];

    invalidInputs.forEach((input) => {
      expect(getCriteriaType(input)).toBe(CriteriaType.NAME);
    });
  });

  it('should return CriteriaType.NAME when validateEmail returns false for email-like strings', () => {
    // Mock validateEmail to return false for email-like strings
    (validateEmail as jest.Mock).mockReturnValue(false);

    const emailLikeStrings = [
      'test@example',     // Missing top-level domain
      'user@.com',        // Missing domain name
      '@example.com',     // Missing local part
    ];

    emailLikeStrings.forEach((input) => {
      expect(getCriteriaType(input)).toBe(CriteriaType.NAME);
      expect(validateEmail).toHaveBeenCalledWith(input); // Ensure validateEmail is called
    });
  });
});
