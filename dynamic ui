import { render, screen } from '@testing-library/react';
import { getRelevantEvent, hasSDSAttributes, mapAssignments } from './path-to-your-file';
import { Assignment, CaseEvent } from 'types/incident.types';
import moment from 'moment';

describe('getRelevantEvent', () => {
  it('should return the first event with a reason or SDS attributes', () => {
    const events: CaseEvent[] = [
      { createdDate: '2023-10-01', reason: 'Reason 1', eventAttributes: {} },
      { createdDate: '2023-10-02', reason: '', eventAttributes: { orderId: '123' } },
      { createdDate: '2023-10-03', reason: 'Reason 2', eventAttributes: {} },
    ];

    const result = getRelevantEvent(events);
    expect(result).toEqual(events[0]);
  });

  it('should return undefined if no events have a reason or SDS attributes', () => {
    const events: CaseEvent[] = [
      { createdDate: '2023-10-01', reason: '', eventAttributes: {} },
      { createdDate: '2023-10-02', reason: '', eventAttributes: {} },
    ];

    const result = getRelevantEvent(events);
    expect(result).toBeUndefined();
  });
});

describe('hasSDSAttributes', () => {
  it('should return true if event has orderId or trioId', () => {
    const event: CaseEvent = { createdDate: '2023-10-01', reason: '', eventAttributes: { orderId: '123' } };
    expect(hasSDSAttributes(event)).toBe(true);
  });

  it('should return false if event has no orderId or trioId', () => {
    const event: CaseEvent = { createdDate: '2023-10-01', reason: '', eventAttributes: {} };
    expect(hasSDSAttributes(event)).toBe(false);
  });

  it('should return false if event is undefined', () => {
    expect(hasSDSAttributes(undefined)).toBe(false);
  });
});

describe('mapAssignments', () => {
  it('should map assignments with relevant events and reason', () => {
    const assignments: Assignment[] = [
      { assignedDate: '2023-10-01', agent: { userName: 'user1' } },
      { assignedDate: '2023-10-03', agent: { userName: 'user2' } },
    ];

    const events: CaseEvent[] = [
      { createdDate: '2023-10-02', reason: 'Reason 1', agent: { userName: 'user1' }, eventAttributes: {} },
      { createdDate: '2023-10-04', reason: 'Reason 2', agent: { userName: 'user2' }, eventAttributes: {} },
    ];

    const result = mapAssignments(assignments, events);
    expect(result).toEqual([
      {
        assignment: assignments[0],
        events: [events[0]],
        reason: 'Reason 1',
      },
      {
        assignment: assignments[1],
        events: [events[1]],
        reason: 'Reason 2',
      },
    ]);
  });

  it('should handle empty events array', () => {
    const assignments: Assignment[] = [
      { assignedDate: '2023-10-01', agent: { userName: 'user1' } },
    ];

    const events: CaseEvent[] = [];

    const result = mapAssignments(assignments, events);
    expect(result).toEqual([
      {
        assignment: assignments[0],
        events: [],
        reason: '',
      },
    ]);
  });

  it('should handle empty assignments array', () => {
    const assignments: Assignment[] = [];
    const events: CaseEvent[] = [
      { createdDate: '2023-10-02', reason: 'Reason 1', agent: { userName: 'user1' }, eventAttributes: {} },
    ];

    const result = mapAssignments(assignments, events);
    expect(result).toEqual([]);
  });
});
