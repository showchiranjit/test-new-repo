import { 
  formatDateWithTimeZoneV3, 
  formatTaskEvents, 
  transformAddress, 
  transformInfo, 
  formatAndSetData, 
  selectedOptions, 
  transformOptions 
} from './yourModule';
import moment from 'moment';

// Mock data
const mockTaskEvent = { eventId: 1, eventType: 'delivery', timestamp: 1632499200000 };
const mockDeliveryTask = {
  serviceType: 'DELIVERY',
  storeInfo: { addressLine1: '123 Main St', city: 'Austin', state: 'TX', postalCode: '73301', country: 'US' },
  taskEvents: [mockTaskEvent],
  customerInfo: { addressLine1: '456 Elm St', city: 'Austin', state: 'TX', postalCode: '73302', country: 'US' },
};
const mockTaskList = [mockDeliveryTask];

// Test formatDateWithTimeZoneV3
describe('formatDateWithTimeZoneV3', () => {
  it('should format the date with the correct timezone and time slot', () => {
    const startTime = 1632499200000;
    const endTime = 1632502800000;
    const timezone = 'America/Chicago';
    const formattedDate = formatDateWithTimeZoneV3(startTime, endTime, timezone);
    expect(formattedDate).toBe('12:00 AM - 01:00 AM CDT 2021-09-24');
  });

  it('should use default values when no timezone or format is provided', () => {
    const startTime = 1632499200000;
    const endTime = 1632502800000;
    const formattedDate = formatDateWithTimeZoneV3(startTime, endTime);
    expect(formattedDate).toBe('12:00 AM - 01:00 AM CDT 2021-09-24');
  });
});

// Test formatTaskEvents
describe('formatTaskEvents', () => {
  it('should return formatted task events with an "isLast" flag', () => {
    const formattedEvents = formatTaskEvents([mockTaskEvent, mockTaskEvent]);
    expect(formattedEvents[0].isLast).toBe(false);
    expect(formattedEvents[1].isLast).toBe(true);
  });

  it('should return an empty array if taskEvents is an empty array', () => {
    const formattedEvents = formatTaskEvents([]);
    expect(formattedEvents).toEqual([]);
  });
});

// Test transformAddress
describe('transformAddress', () => {
  it('should return a transformed address for store info', () => {
    const address = { addressLine1: '123 Main St', city: 'Austin', state: 'TX', postalCode: '73301', country: 'US' };
    const result = transformAddress(address, true);
    expect(result.finalAddress).toBe('123 Main St, Austin, TX, 73301');
  });

  it('should return a full address including country for customer info', () => {
    const address = { addressLine1: '456 Elm St', city: 'Austin', state: 'TX', postalCode: '73302', country: 'US' };
    const result = transformAddress(address, false);
    expect(result.finalAddress).toBe('456 Elm St, Austin, TX, 73302, US');
  });
});

// Test transformInfo
describe('transformInfo', () => {
  it('should return the correct pickup and drop-off address details', () => {
    const info = { addressLine1: '123 Main St', city: 'Austin', state: 'TX', postalCode: '73301', country: 'US', storeName: 'Store A', customerFullName: 'John Doe' };
    const result = transformInfo(info, true);
    expect(result.finalAddress).toBe('123 Main St, Austin, TX, 73301');
    expect(result.storeName).toBe('Store A');
  });

  it('should return the correct drop-off address details', () => {
    const info = { addressLine1: '456 Elm St', city: 'Austin', state: 'TX', postalCode: '73302', country: 'US', storeName: 'Store B', customerFullName: 'Jane Doe' };
    const result = transformInfo(info, false);
    expect(result.finalAddress).toBe('456 Elm St, Austin, TX, 73302, US');
    expect(result.storeName).toBe('Store B');
  });
});

// Test formatAndSetData
describe('formatAndSetData', () => {
  it('should call the appropriate setters for a delivery task', () => {
    const setServiceType = jest.fn();
    const setPickupInfo = jest.fn();
    const setDropOffInfo = jest.fn();
    const setOrderStatusData = jest.fn();

    formatAndSetData(mockDeliveryTask, setServiceType, setPickupInfo, setDropOffInfo, setOrderStatusData);

    expect(setServiceType).toHaveBeenCalledWith('DELIVERY');
    expect(setPickupInfo).toHaveBeenCalledWith({ addressLine1: '123 Main St', city: 'Austin', state: 'TX', postalCode: '73301', country: 'US' });
    expect(setDropOffInfo).toHaveBeenCalledWith({ addressLine1: '456 Elm St', city: 'Austin', state: 'TX', postalCode: '73302', country: 'US' });
    expect(setOrderStatusData).toHaveBeenCalledWith([{ eventId: 1, eventType: 'delivery', timestamp: 1632499200000, isLast: true }]);
  });
});

// Test selectedOptions
describe('selectedOptions', () => {
  it('should return the correct options for a task', () => {
    const result = selectedOptions(mockDeliveryTask);
    expect(result.name).toBe('undefined - undefined');
    expect(result.reasonCode).toBe(undefined);
  });
});

// Test transformOptions
describe('transformOptions', () => {
  it('should transform a list of tasks into selected options', () => {
    const result = transformOptions(mockTaskList);
    expect(result).toHaveLength(1);
    expect(result[0].name).toBe('undefined - undefined');
  });

  it('should transform a single task into selected options', () => {
    const result = transformOptions(mockDeliveryTask);
    expect(result.name).toBe('undefined - undefined');
  });
});
