// src/utilsq.ts
function mapAssignments(assignments, events) {
    return assignments.map((assignment, index) => {
        const username = assignment.agent.userName; // Get the username from the assignment

        const startDate = new Date(assignment.agent.assignedDate);
        const endDate = (index + 1 < assignments.length) 
            ? new Date(assignments[index + 1].agent.assignedDate) 
            : new Date(); // Use current date if it's the last assignment

        const relevantEvents = events.filter(event => {
            const eventDate = new Date(event.agent.createdDate);
            return eventDate >= startDate && eventDate <= endDate && event.agent.userName === username;
        });

        return {
            assignment,
            events: relevantEvents
        };
    }).filter(item => item.events.length > 0); // Filter out assignments with no relevant events
}

// ... existing code ...






// src/utilsq.ts

interface Agent {
    userName: string;
    actions?: Action[];
}

interface Action {
    startDate: string;
    endDate: string;
    agentAttributes?: {
        status?: string;
        skillName?: string;
        skillId?: string;
        vccContactIds?: string;
    };
}

interface Assignment {
    agent: Agent;
    assignedDate: string;
}

interface EventAgent {
    userName: string;
    action?: string;
    noteText?: string;
    createdDate: string;
    eventAttributes?: object;
}

interface Event {
    agent: EventAgent;
    order?: {
        id: string;
        store: {
            id: string;
        };
        action?: string;
        noteText?: string;
        createdDate: string;
        eventAttributes?: object;
    };
}

interface MappedAssignment {
    assignment: Assignment;
    events: Event[];
}

function mapAssignments(assignments: Assignment[], events: Event[]): MappedAssignment[] {
    return assignments.map((assignment, index) => {
        const username = assignment.agent.userName; // Get the username from the assignment

        const startDate = new Date(assignment.agent.assignedDate);
        const endDate = (index + 1 < assignments.length) 
            ? new Date(assignments[index + 1].agent.assignedDate) 
            : new Date(); // Use current date if it's the last assignment

        const relevantEvents = events.filter(event => {
            const eventDate = new Date(event.agent.createdDate);
            return eventDate >= startDate && eventDate <= endDate && event.agent.userName === username;
        });

        return {
            assignment,
            events: relevantEvents
        };
    }).filter(item => item.events.length > 0); // Filter out assignments with no relevant events
}

// ... existing code ...
