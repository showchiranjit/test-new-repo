import { render, screen } from '@testing-library/react';
import { getStoreCustomerAndCurrentStopLocation } from './path-to-your-file';
import { Stop, PickupAndDeliveryLocation } from 'types/spark-driver/trip.types';

describe('getStoreCustomerAndCurrentStopLocation', () => {
  it('should return the correct current stop, store location, and customer location', () => {
    const stops: Stop[] = [
      {
        id: '1',
        type: 'STORE',
        status: 'ENROUTE',
        activities: [
          {
            taskIds: [{ id: 'task1' }],
          },
        ],
      },
      {
        id: '2',
        type: 'CUSTOMER',
        status: 'ARRIVED',
        activities: [
          {
            taskIds: [{ id: 'task2' }],
          },
        ],
      },
      {
        id: '3',
        type: 'OTHER',
        status: 'ENROUTE',
        activities: [
          {
            taskIds: [{ id: 'task3' }],
          },
        ],
      },
    ];

    const selectedTaskId = 'task1';

    const result = getStoreCustomerAndCurrentStopLocation(stops, selectedTaskId);

    expect(result).toEqual({
      currentStop: stops[0],
      customerLocation: stops[1],
      storeLocation: stops[0],
    });
  });

  it('should return undefined for current stop if no stop is ENROUTE or ARRIVED', () => {
    const stops: Stop[] = [
      {
        id: '1',
        type: 'STORE',
        status: 'COMPLETED',
        activities: [
          {
            taskIds: [{ id: 'task1' }],
          },
        ],
      },
      {
        id: '2',
        type: 'CUSTOMER',
        status: 'COMPLETED',
        activities: [
          {
            taskIds: [{ id: 'task2' }],
          },
        ],
      },
    ];

    const selectedTaskId = 'task1';

    const result = getStoreCustomerAndCurrentStopLocation(stops, selectedTaskId);

    expect(result).toEqual({
      currentStop: undefined,
      customerLocation: stops[1],
      storeLocation: stops[0],
    });
  });

  it('should return undefined for store and customer locations if no matching stops are found', () => {
    const stops: Stop[] = [
      {
        id: '1',
        type: 'OTHER',
        status: 'ENROUTE',
        activities: [
          {
            taskIds: [{ id: 'task1' }],
          },
        ],
      },
    ];

    const selectedTaskId = 'task1';

    const result = getStoreCustomerAndCurrentStopLocation(stops, selectedTaskId);

    expect(result).toEqual({
      currentStop: undefined,
      customerLocation: undefined,
      storeLocation: undefined,
    });
  });

  it('should return undefined for all properties if no stops match the selected task ID', () => {
    const stops: Stop[] = [
      {
        id: '1',
        type: 'STORE',
        status: 'ENROUTE',
        activities: [
          {
            taskIds: [{ id: 'task2' }],
          },
        ],
      },
      {
        id: '2',
        type: 'CUSTOMER',
        status: 'ARRIVED',
        activities: [
          {
            taskIds: [{ id: 'task3' }],
          },
        ],
      },
    ];

    const selectedTaskId = 'task1';

    const result = getStoreCustomerAndCurrentStopLocation(stops, selectedTaskId);

    expect(result).toEqual({
      currentStop: undefined,
      customerLocation: undefined,
      storeLocation: undefined,
    });
  });

  it('should handle empty stops array', () => {
    const stops: Stop[] = [];
    const selectedTaskId = 'task1';

    const result = getStoreCustomerAndCurrentStopLocation(stops, selectedTaskId);

    expect(result).toEqual({
      currentStop: undefined,
      customerLocation: undefined,
      storeLocation: undefined,
    });
  });
});
