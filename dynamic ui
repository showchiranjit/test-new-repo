import { ContextData, CaseEvent } from "types/incident.types";
import { SparkDriverContext } from "types/spark-driver/trip.types";
import { getIncidentCategoryReason } from "utils/incident-utils";
import {
  MissingTripsNote,
  ESCALATION_NOTE_CONFIG,
  prepareSDSEscalationNote,
  prepareSDSEscalationEvent,
} from "./path-to-your-file";

// Mock the getIncidentCategoryReason function
jest.mock("utils/incident-utils", () => ({
  getIncidentCategoryReason: jest.fn(() => ({
    name: "Mocked Reason",
    reasonCode: "MOCKED_REASON_CODE",
  })),
}));

describe("MissingTripsNote", () => {
  it("should return null if selectedIncentive is missing or selectedMissingIncentives is empty", () => {
    const contextWithoutIncentive: SparkDriverContext = {
      selectedIncentive: null,
      selectedMissingIncentives: [],
    };
    expect(MissingTripsNote(contextWithoutIncentive)).toBeNull();

    const contextWithEmptyMissingIncentives: SparkDriverContext = {
      selectedIncentive: { incentiveDisplayId: "INC123" },
      selectedMissingIncentives: [],
    };
    expect(MissingTripsNote(contextWithEmptyMissingIncentives)).toBeNull();
  });

  it("should return a note with missing trip IDs and incentive ID", () => {
    const context: SparkDriverContext = {
      selectedIncentive: { incentiveDisplayId: "INC123" },
      selectedMissingIncentives: [
        { displayTripId: "TRIP1" },
        { displayTripId: "TRIP2" },
      ],
    };
    const expectedNote =
      "Trips TRIP1, TRIP2 meet the criteria of the incentive INC123, however, are not marked as a qualifying trip on the driver's account. Needs review.";
    expect(MissingTripsNote(context)).toBe(expectedNote);
  });
});

describe("ESCALATION_NOTE_CONFIG", () => {
  it("should contain all expected keys and functions", () => {
    const context: SparkDriverContext = {
      selectedDriver: {
        firstName: "John",
        lastName: "Doe",
        email: "john.doe@example.com",
        mobile: "1234567890",
      },
      selectedTrip: { displayTripId: "TRIP123" },
      selectedTask: {
        orderId: "ORDER123",
        storeInfo: { storeName: "Store 123" },
        customerInfo: { customerFullName: "Customer Name" },
      },
      selectedIncentive: { incentiveDisplayId: "INC123" },
      safetyIssue: { name: "Safety Issue Name" },
    };

    expect(ESCALATION_NOTE_CONFIG["Driver name"](context)).toBe("John Doe");
    expect(ESCALATION_NOTE_CONFIG["Driver email"](context)).toBe(
      "john.doe@example.com"
    );
    expect(ESCALATION_NOTE_CONFIG["Driver phone number"](context)).toBe(
      "1234567890"
    );
    expect(ESCALATION_NOTE_CONFIG["Driver Trip"](context)).toBe("TRIP123");
    expect(ESCALATION_NOTE_CONFIG["Driver Order"](context)).toBe("ORDER123");
    expect(ESCALATION_NOTE_CONFIG["Driver Store"](context)).toBe("Store 123");
    expect(ESCALATION_NOTE_CONFIG["Incentive ID"](context)).toBe("INC123");
    expect(ESCALATION_NOTE_CONFIG["Customer name from order"](context)).toBe(
      "Customer Name"
    );
    expect(ESCALATION_NOTE_CONFIG["Safety Issue"](context)).toBe(
      "Safety Issue Name"
    );
  });
});

describe("prepareSDSEscalationNote", () => {
  it("should return an empty string if no values are provided", () => {
    const context: SparkDriverContext = {};
    const result = prepareSDSEscalationNote(context);
    expect(result).toBe("");
  });

  it("should combine formConfig and ESCALATION_NOTE_CONFIG values", () => {
    const context: SparkDriverContext = {
      selectedDriver: { firstName: "John", lastName: "Doe" },
      selectedIncentive: { incentiveDisplayId: "INC123" },
    };
    const formConfig = { "Custom Field": "Custom Value" };
    const result = prepareSDSEscalationNote(context, formConfig);
    expect(result).toContain("Driver name: John Doe");
    expect(result).toContain("Incentive ID: INC123");
    expect(result).toContain("Custom Field: Custom Value");
  });

  it("should filter out null values", () => {
    const context: SparkDriverContext = {
      selectedDriver: { firstName: "John", lastName: "Doe" },
      selectedIncentive: null, // This will make "Incentive ID" return null
    };
    const result = prepareSDSEscalationNote(context);
    expect(result).toContain("Driver name: John Doe");
    expect(result).not.toContain("Incentive ID:");
  });
});

describe("prepareSDSEscalationEvent", () => {
  it("should create a CaseEvent with the correct structure", () => {
    const state: ContextData = {
      user: { userName: "agent123" },
      incidentGCState: { categoryAction: "MOCKED_ACTION" },
      sparkDriver: {
        selectedTask: { id: "TASK123", orderId: "ORDER123" },
        selectedTrip: { tripId: "TRIP123", displayTripId: "TRIP123" },
        selectedIncentive: {
          incentiveId: "INC123",
          incentiveDisplayId: "INC123",
        },
      },
    };
    const eventNote = "Test note";
    const result = prepareSDSEscalationEvent(state, eventNote);

    expect(result).toEqual({
      agent: { userName: "agent123" },
      entityDescription: "",
      reason: "Mocked Reason",
      action: "SDS_OFFLINE_ESCALATION",
      noteText: eventNote,
      createdDate: expect.any(String),
      eventAttributes: {
        reasonCode: "MOCKED_REASON_CODE",
        reasonDesc: "Mocked Reason",
        displayTripId: "TRIP123",
        tripId: "TRIP123",
        deliveryTaskId: "TASK123",
        orderId: "ORDER123",
        incentiveId: "INC123",
        incentiveDisplayId: "INC123",
      },
    });
  });
});
