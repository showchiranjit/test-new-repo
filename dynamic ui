import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Context } from 'context';
import DeliveryMapWidget from './DeliveryMapWidget';
import * as GeofenceService from 'services/spark-driver/geofence';

jest.mock('services/spark-driver/geofence', () => ({
  FetchGeofenceService: jest.fn(),
}));

jest.mock('@react-google-maps/api', () => ({
  GoogleMap: jest.fn(({ children }) => <div>{children}</div>),
  MarkerF: jest.fn(() => <div>Marker</div>),
  Circle: jest.fn(() => <div>Circle</div>),
  Polyline: jest.fn(() => <div>Polyline</div>),
  useJsApiLoader: jest.fn(() => ({ isLoaded: true })),
}));

const mockDispatch = jest.fn();
const mockState = {
  sparkDriver: {
    selectedTask: { id: 'task-123', orderId: 'order-123' },
    selectedTrip: { tripId: 'trip-123' },
  },
};

describe('DeliveryMapWidget - Refresh Map', () => {
  it('should call refreshMap when the refresh button is clicked', () => {
    const geofenceServiceMock = jest
      .spyOn(GeofenceService, 'FetchGeofenceService')
      .mockResolvedValue({
        geofenceRadius: { measurementValue: 500 },
        currentDriverLocation: { lat: 40.7128, lng: -74.006 },
        tasks: [{ actualRouteTaken: 'encoded-route', estimatedRoutePending: null }],
      });

    render(
      <Context.Provider value={{ state: mockState, dispatch: mockDispatch }}>
        <DeliveryMapWidget />
      </Context.Provider>
    );

    // Ensure the refresh button exists
    const refreshButton = screen.getByRole('button', { name: /refresh map/i });
    expect(refreshButton).toBeInTheDocument();

    // Simulate clicking the refresh button
    fireEvent.click(refreshButton);

    // Ensure the services are called during refresh
    expect(geofenceServiceMock).toHaveBeenCalledTimes(1);

    // Ensure dispatch actions for spinner control are called
    expect(mockDispatch).toHaveBeenCalledWith({ type: 'openSpinner' });
    expect(mockDispatch).toHaveBeenCalledWith({ type: 'closeSpinner' });
  });
});
