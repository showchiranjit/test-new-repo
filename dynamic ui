import moment from "moment";
import {
  filteredTripsWithMatchIncentives,
  formatAccordionDate,
  formatAccordionDescription,
  htmlToPlainText,
  convertToKeyValue,
  parseDescription,
} from "./path-to-your-file"; // Adjust the import path accordingly

describe("filteredTripsWithMatchIncentives", () => {
  it("should return trips with matched incentives", () => {
    const trips = [
      { tripId: "1", tripName: "Trip 1" },
      { tripId: "2", tripName: "Trip 2" },
    ];
    const incentive = {
      eventProgress: [
        {
          eventDetails: [
            { tripId: "1", zone: "Zone A" },
            { tripId: "3", zone: "Zone B" },
          ],
        },
      ],
    };

    const result = filteredTripsWithMatchIncentives(trips, incentive);

    expect(result).toEqual([
      { tripId: "1", tripName: "Trip 1", zone: "Zone A", isQualified: true },
      { tripId: "2", tripName: "Trip 2", zone: null, isQualified: false },
    ]);
  });

  it("should handle empty trips array", () => {
    const trips = [];
    const incentive = {
      eventProgress: [
        {
          eventDetails: [
            { tripId: "1", zone: "Zone A" },
          ],
        },
      ],
    };

    const result = filteredTripsWithMatchIncentives(trips, incentive);

    expect(result).toEqual([]);
  });

  it("should handle empty eventProgress array", () => {
    const trips = [
      { tripId: "1", tripName: "Trip 1" },
    ];
    const incentive = {
      eventProgress: [],
    };

    const result = filteredTripsWithMatchIncentives(trips, incentive);

    expect(result).toEqual([
      { tripId: "1", tripName: "Trip 1", zone: null, isQualified: false },
    ]);
  });
});

describe("formatAccordionDate", () => {
  it("should format date string correctly", () => {
    const dateString = "2023-10-05";
    const result = formatAccordionDate(dateString);
    expect(result).toBe("10/05/2023");
  });

  it("should handle invalid date string", () => {
    const dateString = "invalid-date";
    const result = formatAccordionDate(dateString);
    expect(result).toBe("Invalid date");
  });
});

describe("formatAccordionDescription", () => {
  it("should replace newlines with spaces", () => {
    const description = "Line 1\nLine 2\nLine 3";
    const result = formatAccordionDescription(description);
    expect(result).toBe("Line 1 Line 2 Line 3");
  });

  it("should handle undefined description", () => {
    const description = undefined;
    const result = formatAccordionDescription(description);
    expect(result).toBe("");
  });
});

describe("htmlToPlainText", () => {
  it("should remove HTML tags from the input string", () => {
    const input = "<p>Hello <b>World</b></p>";
    const result = htmlToPlainText(input);
    expect(result).toBe("Hello World");
  });

  it("should handle empty input", () => {
    const input = "";
    const result = htmlToPlainText(input);
    expect(result).toBe("");
  });
});

describe("convertToKeyValue", () => {
  it("should convert lines to key-value pairs", () => {
    const lines = ["key1: value1", "key2: value2", "justValue"];
    const result = convertToKeyValue(lines);
    expect(result).toEqual([
      { key: "key1", value: "value1" },
      { key: "key2", value: "value2" },
      { key: "", value: "justValue" },
    ]);
  });

  it("should handle empty lines array", () => {
    const lines = [];
    const result = convertToKeyValue(lines);
    expect(result).toEqual([]);
  });
});

describe("parseDescription", () => {
  it("should parse description correctly", () => {
    const summary = "<p>Summary</p>";
    const description = "Line 1\nkey1: value1\nkey2: value2\nFooter";
    const result = parseDescription(summary, description);
    expect(result).toEqual({
      header: {
        summary: "Summary",
        line: "Line 1",
      },
      body: [
        { key: "key1", value: "value1" },
        { key: "key2", value: "value2" },
      ],
      footer: "Footer",
    });
  });

  it("should handle empty description", () => {
    const summary = "<p>Summary</p>";
    const description = "";
    const result = parseDescription(summary, description);
    expect(result).toBeUndefined();
  });
});
