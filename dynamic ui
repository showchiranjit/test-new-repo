import React from 'react';
import { render, screen } from '@testing-library/react';
import { Context } from 'context';
import DeliveryMapWidget from './DeliveryMapWidget';
import * as TripExecutorService from 'services/spark-driver/trip-executor';

jest.mock('@react-google-maps/api', () => ({
  GoogleMap: jest.fn(({ children }) => <div>{children}</div>),
  MarkerF: jest.fn(() => <div>Marker</div>),
  Circle: jest.fn(() => <div>Circle</div>),
  Polyline: jest.fn(() => <div>Polyline</div>),
  useJsApiLoader: jest.fn(() => ({ isLoaded: true })),
}));

jest.mock('services/spark-driver/trip-executor', () => ({
  FetchTripExecutor: jest.fn(),
}));

const mockDispatch = jest.fn();
const mockState = {
  sparkDriver: {
    selectedTask: { id: 'task-123', orderId: 'order-123' },
    selectedTrip: { tripId: 'trip-123' },
  },
};

describe('DeliveryMapWidget - FetchTripExecutor Catch Scenario', () => {
  it('should handle errors from FetchTripExecutor gracefully', async () => {
    // Mock FetchTripExecutor to throw an error
    const tripExecutorMock = jest
      .spyOn(TripExecutorService, 'FetchTripExecutor')
      .mockRejectedValue(new Error('Failed to fetch trip executor data'));

    render(
      <Context.Provider value={{ state: mockState, dispatch: mockDispatch }}>
        <DeliveryMapWidget />
      </Context.Provider>
    );

    // Ensure the spinner is opened
    expect(mockDispatch).toHaveBeenCalledWith({ type: 'openSpinner' });

    // Wait for the FetchTripExecutor call to finish
    await screen.findByText('Loading...'); // Adjust if needed for loading state UI

    // Ensure the error is logged in the console (or however your app handles it)
    expect(console.log).toHaveBeenCalledWith('Error fetching trip executor data');

    // Ensure the spinner is closed
    expect(mockDispatch).toHaveBeenCalledWith({ type: 'closeSpinner' });

    // Ensure FetchTripExecutor was called once
    expect(tripExecutorMock).toHaveBeenCalledWith({ tripId: 'trip-123' });
  });
});
