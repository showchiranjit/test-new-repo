import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Context, GlobalContext } from "context";
import IncentiveDetailsMissingTripsWidget from "./IncentiveDetailsMissingTripsWidget";
import { SearchTrips } from "services/spark-driver/trip";
import { formatDate } from "utils/moment-time-utils";
import moment from "moment";
import { TripResponse, TripIncentive, Trip } from "types/spark-driver/trip.types";
import { Incentive } from "types/spark-driver/incentive.types";

// Mock the context
const mockDispatch = jest.fn();
const mockState = {
  sparkDriver: {
    selectedDriver: {
      driverUserId: "123",
    },
  },
};

const mockContextValue = {
  state: mockState,
  dispatch: mockDispatch,
};

// Mock the services
jest.mock("services/spark-driver/trip", () => ({
  SearchTrips: jest.fn(),
}));

// Mock the utility functions
jest.mock("utils/spark-driver/incentive-utils", () => ({
  filteredTripsWithMatchIncentives: jest.fn(),
}));

jest.mock("utils/spark-driver/trip-utils", () => ({
  sortTripsAndGroupTasks: jest.fn(),
}));

// Mock the child component
jest.mock("components/incentive-accordion", () => ({
  __esModule: true,
  default: ({ trip, handleCheckboxChange, selectedMissingIncentives, onlyQualified }) => (
    <div data-testid="incentive-accordion">
      <input
        type="checkbox"
        data-testid={`checkbox-${trip.tripId}`}
        onChange={() => handleCheckboxChange(trip)}
        checked={selectedMissingIncentives.includes(trip)}
      />
      <span>{trip.tripId}</span>
    </div>
  ),
}));

describe("IncentiveDetailsMissingTripsWidget", () => {
  const mockIncentive: Incentive = {
    incentiveEndDate: "2023-10-01",
  } as Incentive;

  const mockTrip: Trip = {
    tripId: "trip-1",
    isQualified: true,
  } as Trip;

  const mockTripIncentive: TripIncentive = {
    ...mockTrip,
  } as TripIncentive;

  const mockTripResponse: TripResponse = {
    tripList: [mockTrip],
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (SearchTrips as jest.Mock).mockResolvedValue(mockTripResponse);
    (filteredTripsWithMatchIncentives as jest.Mock).mockReturnValue([mockTripIncentive]);
    (sortTripsAndGroupTasks as jest.Mock).mockReturnValue([mockTripIncentive]);
  });

  it("renders the component with the incentive end date", () => {
    render(
      <Context.Provider value={mockContextValue}>
        <IncentiveDetailsMissingTripsWidget
          incentive={mockIncentive}
          isQualifiedTrips={true}
          setQualifiedTrips={jest.fn()}
        />
      </Context.Provider>
    );

    expect(screen.getByText(formatDate(mockIncentive.incentiveEndDate, "YYYY-MM-DD"))).toBeInTheDocument();
  });

  it("fetches trips and updates state on mount", async () => {
    render(
      <Context.Provider value={mockContextValue}>
        <IncentiveDetailsMissingTripsWidget
          incentive={mockIncentive}
          isQualifiedTrips={true}
          setQualifiedTrips={jest.fn()}
        />
      </Context.Provider>
    );

    await waitFor(() => {
      expect(SearchTrips).toHaveBeenCalledWith({
        fromDate: formatDate(moment(mockIncentive.incentiveEndDate).subtract(20, "days"), "YYYY-MM-DD"),
        toDate: formatDate(moment(mockIncentive.incentiveEndDate).add(1, "day"), "YYYY-MM-DD"),
        driverUserId: mockState.sparkDriver.selectedDriver.driverUserId,
        criteria: "",
      });
      expect(screen.getByTestId("incentive-accordion")).toBeInTheDocument();
    });
  });

  it("renders 'No Qualifying trips' message when no trips are available", async () => {
    (filteredTripsWithMatchIncentives as jest.Mock).mockReturnValue([]);
    (sortTripsAndGroupTasks as jest.Mock).mockReturnValue([]);

    render(
      <Context.Provider value={mockContextValue}>
        <IncentiveDetailsMissingTripsWidget
          incentive={mockIncentive}
          isQualifiedTrips={true}
          setQualifiedTrips={jest.fn()}
        />
      </Context.Provider>
    );

    await waitFor(() => {
      expect(screen.getByText("No Qualifying trips for the duration of the selected incentive")).toBeInTheDocument();
    });
  });

  it("handles checkbox change and updates selectedMissingIncentiveList", async () => {
    render(
      <Context.Provider value={mockContextValue}>
        <IncentiveDetailsMissingTripsWidget
          incentive={mockIncentive}
          isQualifiedTrips={true}
          setQualifiedTrips={jest.fn()}
        />
      </Context.Provider>
    );

    await waitFor(() => {
      const checkbox = screen.getByTestId("checkbox-trip-1");
      fireEvent.click(checkbox);
      expect(mockDispatch).toHaveBeenCalledWith(setSelectedMissingIncentive([mockTripIncentive]));
    });
  });
});
